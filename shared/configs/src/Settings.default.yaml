# Production/Development mode.
DEV_MODE: true

# Silence warning messages. Useful for development when still messing around with stuff and to
# avoid getting spammed. Warning should be fixed though for a prod build.
IGNORE_WARNINGS: false

# Whether any clients should attempt to make HTTP/WS or secured HTTPS/WSS connections to any services.
# Means that all services will need to be behind a reverse-proxy that terminates the SSL connection.
USE_SECURE_PROTOCOLS: false

# URL of the game service.
# e.g.
# localhost:1111 (direct access to the running process)
# rogueworld.io (root level domain name, then reverse-proxied to where ever the service is running).
# Example Caddyfile rules:
# reverse_proxy @websockets 167.71.187.147:1111
# reverse_proxy /api/* 167.71.187.147:1111
GAME_SERVICE_URL: localhost:1111

# Port number of the game service. Should match whatever is set for the port in GAME_SERVICE_URL.
GAME_SERVICE_PORT: 1111

# URL of the map service. e.g. rogueworld.io (reverse-proxied to where ever the service is running).
# Example Caddyfile rule
# reverse_proxy /map/* 154.72.186.149:2222
MAP_SERVICE_URL: localhost:2222

# Port number of the map service. Should match whatever is set for the port in MAP_SERVICE_URL.
MAP_SERVICE_PORT: 2222

# URL of the language service. e.g. rogueworld.io (reverse-proxied to where ever the service is running).
# Example Caddyfile rule
# reverse_proxy /language/* 154.72.186.149:4444
LANGUAGE_SERVICE_URL: localhost:4444

# Port number of the language service. Should match whatever is set for the port in LANGUAGE_SERVICE_URL.
LANGUAGE_SERVICE_PORT: 4444

# Absolute path to where ever the Tiled tmxrasterizer script is installed.
# Tiled comes with tmxrasterizer which is used by the map service to generate the source images of
# the map that it needs to then generate the map tiles for the map panel.
# tmxrasterizer is installed in the same directory as the main Tiled exe, so look there.
TMXRASTERIZER_PATH: /snap/bin/tiled.tmxrasterizer

# Port number of the REST server that listens for webhook events.
GIT_WEBHOOK_PORT: 3333

# Optional name of the branch to watch for updates to when a webhook event is received.
# This setting is useful as GitHub doesn't support per-branch webhook events.
# GitHub sends the webhook event to all listeners when ANY branch is updated.
# This means that when this setting is not set, the event logic will be ran every time any branch
# is updated, which is usually undesirable.
# The request from GitHub should come with the name of the branch that was updated with the
# request, so per-branch updating can be achieved this way.
GIT_WEBHOOK_BRANCH_NAME: dev

# Optional secret string to check before running the event logic.
# The request should contain this secret from the source, i.e. GitHub Webhooks.
# When not set, ALL requests to the REST server will trigger the event logic, even ones not from
# the intended source (i.e. GitHub).
GIT_WEBHOOK_SECRET: ""

# Up to how many players can be playing at once.
MAX_PLAYERS: 1000

# How often to save the current state of logged in players to their account in the DB.
# State changes (glory/stat exp/inventory item/bank item/etc. modified) are done in memory and then
# saved to the DB every interval.
# If the server crashes between intervals, then players will lose any changes since their last save.
ACCOUNT_AUTO_SAVE_RATE: 15000

# How often to save the current state of a persistent entity to their document in the DB.
# State changes (hitpoints/position/etc. modified) are done in memory and then saved to the DB
# every interval.
# If the server crashes between intervals, then entities will lose any changes since their last save.
ENTITY_AUTO_SAVE_RATE: 30000

# Each game day is split up into an amount of sections, but the total length of a full day cycle
# is always the same regardless of the ratio between dawn/day/dusk/night.
# e.g. Changing the length of night from 6 to 10, will only give it a larger propertion of this
# full duration value, not make the whole day any longer.
FULL_DAY_DURATION_MINUTES: 1

# What proportion of the whole day should be day.
DAY_PHASE_LENGTH_DAY: 10

# What proportion of the whole day should be dusk.
DUSK_PHASE_LENGTH_DUSK: 4

# What proportion of the whole day should be night.
NIGHT_PHASE_LENGTH_NIGHT: 9

# What proportion of the whole day should be dawn.
DAWN_PHASE_LENGTH_DAWN: 1

# How much "stuff" can be on a board at once.
# These could be all kinds of entities.
# Population is NOT a direct correlation with amount of entities, as some entities may have a
# higher population weight, i.e. a rat might take 1 population space, but a boss might take 8.
MAX_BOARD_POPULATION: 500

# A factor to scale display objects by on the client, and any specific size assets that need to be generated and served over API.
CLIENT_DISPLAY_SCALE: 2

# How long the player character name can be.
MAX_CHARACTER_DISPLAY_NAME_LENGTH: 20

# How long the player account username can be for new accounts.
MAX_ACCOUNT_USERNAME_LENGTH: 50

# The board (map) to spawn players onto.
# Must be an existing, permanent instance, not a dynamically added board.
PLAYER_SPAWN_BOARD_NAME: plains

# How many tiles away the players can see on the client, and therefore how much data to send.
PLAYER_VIEW_RANGE: 9

# How long between each time the player entity can move. (ms)
# Lower is less delay, so faster move speed.
PLAYER_MOVE_RATE: 400

# How much glory a new player starts with.
PLAYER_STARTING_GLORY: 100

# How many hitpoints a player entity can have.
PLAYER_MAX_HITPOINTS: 50

# How much food the player starts with as their max.
PLAYER_STARTING_MAX_FOOD: 50

# How often food will be drained from the player. (ms)
PLAYER_FOOD_DRAIN_RATE: 5000

# How much food will be drained from the player each time the drain loop loops.
PLAYER_FOOD_DRAIN_AMOUNT: 1

# How long to modify the player move rate for when they are in combat. (ms)
PLAYER_COMBAT_SLOWDOWN_DURATION: 5000

# How much to modify the player move rate by when they are in combat.
# Greater than 1 to increase the amount of time between moves, so lower speed.
PLAYER_COMBAT_SLOWDOWN_MOVE_RATE_MODIFIER: 1.2

# How many consecutive move steps in the same direction it takes for a player to reach the full
# move rate modifier offered by PLAYER_MAX_MOMENTUM_MODIFIER.
PLAYER_MAX_MOMENTUM: 3

# How much to modify a player's move rate by when they are at max momentum.
# If they are not at max momentum when they move, this value will be what percentage of the max
# momentum they have.
# e.g. with this setting of 0.4, a max momentum of 8, and a momentum of 4 so far (50% of max
# momentum), then this modifier will be 0.2 (50%).
PLAYER_MAX_MOMENTUM_MODIFIER: 0.4

# How much to multiply the crafting bonus by.
# The crafting bonus is how much percent extra durability/quantity is added to crafted items, and
# is determined by the average of the players stats that are listed in the stats for the recipe.
# So if a recipe uses the stats Weaponry and Toolery, it will take the average of the player's
# Weaponry and Toolery stats and multiply that by this setting value.
# With an average stat level of 7 and with a crafting bonus multiplier of 2, the crafted item will
# have 14% more durability/quantity than its base amount.
CRAFTING_STAT_BONUS_MULTIPLIER: 1

# How much weight a player can carry at once.
MAX_INVENTORY_WEIGHT: 500

# How much to increase a player's max inventory weight by for each level they have gained in every stat.
# e.g. with this setting of 10, a base max inventory weight setting of 1000, and a player with 3
# stats of levels 4 (3), 11 (10), and 23 (22), then their max inventory weight would be 1350.
# Note that this is GAINED levels only, and doesn't include the base level of 1, so -1 from each stat.
# (3 + 10 + 22) * 10 = 350 + 1000 = 1350
ADDITIONAL_MAX_INVENTORY_WEIGHT_PER_STAT_LEVEL: 10

# How much weight a player can have in their bank at once.
MAX_BANK_WEIGHT: 1000

# How much to increase the player's max bank weight by for each upgrade they have bought.
ADDITIONAL_MAX_BANK_WEIGHT_PER_UPGRADE: 50

# How much to multiply the cost of the next max bank weight upgrade by.
# The base cost of each upgrade is the current max weight.
# e.g. with this setting of 2, and a current max bank weight of 1650, the cost to buy the next
# upgrade would be 3300.
# 1650 * 2 = 3300
MAX_BANK_WEIGHT_UPGRADE_COST_MULTIPLIER: 4

STARTER_INVENTORY_ITEMS:
  - itemName: WoodenClub
  - itemName: HealthPotion
    quantity: 1
  - itemName: Carrot
    quantity: 2

STARTER_BANK_ITEMS:
  - itemName: HealthPotion
    quantity: 4
  - itemName: Cotton
    quantity: 4
  - itemName: IronOre
    quantity: 4

# How much glory it costs for a player to change their character display name.
DISPLAY_NAME_CHANGE_COST: 1000

# How much to change the price of an NPC shop item by each time it is bought, so it can become more
# expensive to buy if bought frequently. Cumulative. Slowly returns back to the base price for that
# item.
SHOP_PRICE_INCREASE_MULTIPLIER: 1.05

# The channels/categories of chat topics that players can send their messages in, with configurable
# cooldowns to limit the message rate of each player in that scope.
CHAT_SCOPES:
  LOCAL:
    value: LOCAL
    cooldown: 0
  GLOBAL:
    value: GLOBAL
    cooldown: 5000
  TRADE:
    value: TRADE
    cooldown: 5000

# How long incoming player chat messages can be.
MAX_CHAT_MESSAGE_LENGTH: 255

# How many seconds after receiving damage player in combat flag is true
IN_COMBAT_STATUS_DURATION: 15000
